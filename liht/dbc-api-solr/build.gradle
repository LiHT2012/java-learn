buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8
webAppDirName = 'WebContent'
sourceSets.main.java.srcDir 'src/main/java'
sourceSets.main.java.srcDir 'src/main/test'
sourceSets.main.java.srcDir 'config'

war {
    baseName = System.properties['dbcWarName']
    /* version = '0.0.1-SNAPSHOT' */
}

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

repositories {
    maven {
        url  "http://jcenter.bintray.com"
    }
}

dependencies {
    /* jpinyin*/
    compile('com.github.stuxuhai:jpinyin:1.1.3')
    compile('org.apache.solr:solr-solrj:6.6.0')
    /* spring-boot */
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-redis')
    
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1")

    testCompile('org.springframework.boot:spring-boot-starter-test')
    runtime('mysql:mysql-connector-java')

    compile('org.springframework.session:spring-session-data-redis:1.0.1.RELEASE')
    compile ('com.jayway.restassured:rest-assured:2.7.0')

    testCompile('junit:junit:4.12')

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile('com.fasterxml.jackson.core:jackson-core:2.6.6')
    compile('com.fasterxml.jackson.core:jackson-databind:2.6.6')
    compile('org.apache.commons:commons-collections4:4.1')
    compile('org.apache.commons:commons-email:1.2')
    compile('commons-httpclient:commons-httpclient:3.1')
    compile('commons-lang:commons-lang:2.6')
    compile('org.apache.httpcomponents:httpclient:4.5.1')
    compile('org.json:json:20151123')
    compile ('org.apache.logging.log4j:log4j-api:2.6.2')
    compile ('org.apache.logging.log4j:log4j-core:2.6.2')
    compile ('org.apache.logging.log4j:log4j-web:2.1')
    compile ('dom4j:dom4j:1.6.1')
    compile('com.google.zxing:core:3.3.0')
    compile('Pingplusplus:pingpp-java:2.1.8')

    compile('net.sf.json-lib:json-lib:2.4:jdk15')
    compile('com.qiniu:qiniu-java-sdk:7.0.+')
    compile('com.amazonaws:aws-java-sdk-s3:1.11.68')
    compile ('com.amazonaws:aws-java-sdk-emr:1.11.68')
    compile('org.bouncycastle:bcprov-jdk15on:1.56')
    /*for excel*/
    compile('org.apache.poi:poi:3.14')
    
    compile group: 'com.belerweb', name: 'pinyin4j', version: '2.5.1'
    
//test
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
}

/* 本地部署war包的一个命令，方便调试使用*/
task deployLocalDbcApi(type: Copy,dependsOn: [clean,war]) {
    from('build/libs') {
        include "${System.properties['dbcWarName']}.war"
        /* include 'dbc-api.war' */
    }
    into("${System.properties['tomcatHome']}/webapps")
}

task cfgDbcUrlProd << {
    setTestEnv("prod")
}
task cfgDbcUrlGlasses << {
    setTestEnv("glasses")
}
task cfgDbcUrlLocalToProd << {
    setTestEnv("localtoprod")
}
task setDbcUrlTest1 << {
    setTestEnv("test1")
}

task setDbcUrlTest2 << {
    setTestEnv("test2")
}

task getCatalinaHome {
    def path = System.getenv()['CATALINA_HOME']

    if (path){
        println("CATALINA_HOME = $path")
    } else {
        throw new RuntimeException("environment variable 'CATALINA_HOME' doesn't exist.please set it")
    }
}

task deployApi(type:Copy,dependsOn:[getCatalinaHome,clean,war]) {
    from('build/libs') {
        include "${System.properties['dbcWarName']}.war"
        /* include 'dbc-api.war' */
    }
    /* ${System.properties['user.home'] */
    into("${System.getenv()['CATALINA_HOME']}/dbc-api/webapps")
}

/* API运行环境部署 */
task deployApiInProd (dependsOn:[cfgDbcUrlProd, deployApi]){}

task deployApiInGlasses (dependsOn:[cfgDbcUrlGlasses, deployApi]){}

task deployApiInLocalToProd (dependsOn:[cfgDbcUrlLocalToProd, deployApi]){}

task deployApiInTest1(type: Copy,dependsOn: [getCatalinaHome, clean,setDbcUrlTest1,war]) {
    from('build/libs') {
        include "${System.properties['dbcWarName']}.war"
        /* include 'dbc-api.war' */
    }
    into("${System.getenv()['CATALINA_HOME']}/dbc-api/webapps")

    doLast {
        setTestEnv("localtoprod")
    }
}

task deployApiInTest2(type: Copy,dependsOn: [clean,setDbcUrlTest2,war]) {
    from('build/libs') {
        include "${System.properties['dbcWarName']}.war"
        /* include 'dbc-api.war' */
    }
    /*into("${System.properties['testAwsTomcatHome']}/webapps")*/
    into("${System.getenv()['CATALINA_HOME']}/dbc-api/webapps")

    doLast {
        setTestEnv("localtoprod")
    }
}

def setTestEnv (type) {
    String filePath = 'src/main/resources/application.properties'
    def file = new File(filePath).getText('UTF-8')
    .replaceAll(new File(filePath).readLines().get(0), "spring.profiles.active=" + type)
    new File(filePath).write(file, 'UTF-8')
}


