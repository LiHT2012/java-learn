Class<MyThread> a = MyThread.class;
Class<?> b = Class.forName("com.dbcool.api.liht.MyThread");
MyThread m = new MyThread();
Class<? extends MyThread> c = m.getClass();

我们平时干活更偏重于业务，不可能大量接触到算法，数据结构，底层代码这类面试必问的问题点。

单纯使用SSM框架，大多数项目都会有痛点。比如数据库性能差，或者业务模块比较复杂，并发量比较高，用Spring MVC里的Controller无法满足跳转的需求。
所以我一般还会主动问：你除了依照现有框架写业务代码时，还做了哪些改动？

回答有：增加了Redis缓存，以避免频繁调用一些不变的数据。@Cacheable(value=CacheService.GOURP_CACHE_NAME,key="#uid")
或者，在MyBitas的xml里，select语句where条件有isnull，即这个值有就增加一个where条件，对此，会对任何一个where增加一个不带isnull的查询条件，
以免该语句当传入参数都是null时，做全表扫描。
(where动态语句来解决。这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。)
或者，干脆说，后端异步返回的数据量很大，时间很长，我在项目里就调大了异步返回的最大时间，或者对返回信息做了压缩处理，以增加网络传输性能。

分布式：
1、反向代理方面，nginx的基本配置，比如如何通过lua语言设置规则，如何设置session粘滞。如果可以，再看些nginx的底层，比如协议，集群设置，失效转移等。

2、远程调用dubbo方面，可以看下dubbo和zookeeper整合的知识点，再深一步，了解下dubbo底层的传输协议和序列化方式。

3、消息队列方面，可以看下kafka或任意一种组件的使用方式，简单点可以看下配置，工作组的设置，再深入点，可以看下Kafka集群，持久化的方式，以及发送消息是用长连接还是短拦截。

以上仅仅是用3个组件举例，大家还可以看下Redis缓存，日志框架，MyCAT分库分表等。准备的方式有两大类，第一是要会说怎么用，这比较简单，能通过配置文件搭建成一个功能模块即可，
第二是可以适当读些底层代码，以此了解下协议，集群和失效转移之类的高级知识点。

数据库除增删改，还需优化：
1、SQL高级方面，比如group by, having，左连接，子查询（带in），行转列等高级用法。

2、建表方面，你可以考虑下，你项目是用三范式还是反范式，理由是什么？

3、尤其是优化，你可以准备下如何通过执行计划查看SQL语句改进点的方式，或者其它能改善SQL性能的方式（比如建索引等）。

4、如果你感觉有能力，还可以准备些MySQL集群，MyCAT分库分表的技能。比如通过LVS+Keepalived实现MySQL负载均衡，MyCAT的配置方式。同样，如果可以，也看些相关的底层代码。

围绕数据结构和性能优化准备面试题
Java核心方面，围绕数据结构和性能优化准备面试题！Java核心这块，网上的面试题很多，不过在此之外，大家还应当着重关注集合（即数据结构）和多线程并发这两块，
在此基础上，大家可以准备些设计模式和虚拟机的说辞。

String a = "123"; String b = "123"; a==b的结果是什么？ 这包含了内存，String存储方式等诸多知识点。

HashMap里的hashcode方法和equal方法什么时候需要重写？如果不重写会有什么后果？对此大家可以进一步了解HashMap（甚至ConcurrentHashMap）的底层实现。

ArrayList和LinkedList底层实现有什么差别？它们各自适用于哪些场合？对此大家也可以了解下相关底层代码。

volatile关键字有什么作用？由此展开，大家可以了解下线程内存和堆内存的差别。volatile关键字解析。

CompletableFuture，这个是JDK1.8里的新特性，通过它怎么实现多线程并发控制？

JVM里，new出来的对象是在哪个区？再深入一下，问下如何查看和优化JVM虚拟机内存。

Java的静态代理和动态代理有什么差别？最好结合底层代码来说。

通过上述的问题点，我其实不仅仅停留在“会用”级别，比如我不会问如何在ArrayList里放元素。大家可以看到，上述问题包含了“多线程并发”，“JVM优化”，“数据结构对象底层代码”等细节，
大家也可以举一反三，通过看一些高级知识，多准备些其它类似面试题。

Linux方面，至少了解如何看日志排查问题！如果候选人能证明自己有“排查问题”和“解决问题”的能力，这绝对是个加分项，但怎么证明？

目前大多数的互联网项目，都是部署在Linux上，也就是说，日志都是在Linux。

1、能通过less命令打开文件，通过Shift+G到达文件底部，再通过?+关键字的方式来根据关键来搜索信息。

2、能通过grep的方式查关键字，具体用法是, grep 关键字 文件名，如果要两次在结果里查找的话，就用grep 关键字1 文件名 | 关键字2 --color。最后--color是高亮关键字。

3、能通过vi来编辑文件。

4、能通过chmod来设置文件的权限。
