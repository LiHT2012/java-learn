在.py文件中：
1.直接 print "内容"，run即可打印除内容Python2的书写语法。#问题，www.codecademy.com上 内容为中文的时候，会报错，尚未解决。
print("内容")，Python3语法，有同样问题

2.字符串的拼接打印，类Java ：print "str1"+"str2"

3.python中的变量无需提前指定类型，如 number=5#number就是int类型的；string = "aaa"#String就是字符串类型的

4.Python中的加减乘除等与Java类似。

5.python中的注释用#

6.Python中的除法类比Java中/是一样的，但是Python中可以这样写： 7./2  or  7/2.  or 7./2. or float(7)/2 这样的结果就是带小数点的,对于用变量的除法，则只能用float(sum)/numbers。

7.python中的多行字符串写法： """the contens with multiline""",即用前后三个双引号包括多行字符串即可，也可以是三个单引号。

8.Python中的Boolean为 True和False，不同于Java中的true和false。

9.数字转字符串 str(num);字符串数字转相应的数字类型，int(str_num),float(str_num),如果str_num是浮点数，此时的int(str_num)即转化为整型

10.获取字符串的第5个字符：fifth_letter = "MONTY"[4]，字符串的index也是从0开始的。
关于字符串的几个函数：len(str),str.lower(),str.upper(),str(一些非字符串类型的变量，如数字等)

11.name = "Mike"
print "Hello %s" % (name)，类似C语言中的表达。

name = raw_input("What is your name? ")#表示需要键盘输入
quest = raw_input("What is your quest? ")
color = raw_input("What is your favorite color? ")

print "Ah, so your name is %s, your quest is %s, " \
"and your favorite color is %s." % (name, quest, color)#多个占位符的情况。

12.datetime包的使用
from datetime import datetime#导入包，类似Java中的import
now = datetime.now()
print now 
print now.year
print now.month
print now.day
print '%02d/%02d/%04d' % (now.month, now.day, now.year) #打印效果mm/dd/yyyy
print '%02d:%02d:%02d' % (now.hour, now.minute, now.second)#打印效果hh:mm:ss

story = """aadd %s ddfdfd %s ……"""
print story %(str1,str2……)

13.def clinic():
    print "You've just entered the clinic!"
    print "Do you take the door on the left or the right?"
    answer = raw_input("Type left or right and hit 'Enter'.").lower()
    if answer == "left" or answer == "l":
        print "This is the Verbal Abuse Room, you heap of parrot droppings!"
    elif answer == "right" or answer == "r":
        print "Of course this is the Argument Room, I've told you that already!"
    else:
        print "You didn't pick left or right! Try again."
        clinic()#??

clinic()#??
#定义了一个函数？主要语法是if ***:   elif ***: else ****:

14.3**16
# Remember that ** can be read as 'to the power of',即相当于3^16次方. 3**16 is about 43 million.

15.Python中的大于小于等于的比较和true，false的判断与Java相同
not is evaluated first;
and is evaluated next;
or is evaluated last.


16.def using_control_once():
    if 1==1:
        return "Success #1"
Python中函数的写法？？
直接return的true，false的函数也可以直接print

正常装了Python等环境之后，在控制台可以执行 python shell.py，即可执行脚本。


17.string.isalpha() to make sure that it only contains letters.

new_word=new_word[1:len(new_word)]#表示从index=1取到length-1的位置，即左闭右开区间

----
"""calculate the area of one shape 
and print it on the consel"""
print "the program is running"

shape = raw_input("Enter C for Circle or T for Triangle: ")
if shape == 'C':
  radius = float(raw_input("please input the radius: "))
area=3.14159*radius**2
print str(area)
elif shape == 'T':
  base = float(raw_input("please input the base of the triangle: "))
  height = float(raw_input("please input the height of the triangle: "))
  area = 1/2*base*height
  print str(area)

else :
    print "illegle input"
    
  print "program is exiting"
一执行就报错，说elif一行有语法错误……难道elif 要缩进两格？
----

18.定义函数：
def tax(bill):
  """Adds 8% tax to a restaurant bill."""#是对函数的描述，有点类似于注释的意思
  bill *= 1.08
  print "With tax: %f" % bill
  return bill

调用函数：
meal_cost = 100
meal_with_tax = tax(meal_cost)

19.导入调用math包 
import math 
print math.sqrt(25)

只能从给定模块中导入某些变量或函数。从模块中仅拉入一个函数称为函数导入，并使用From关键字完成：
from module import function

from math import sqrt  或有from math import * #(不提倡这么做）
print sqrt(25)



import math # Imports the math module
everything = dir(math) # Sets everything to a list of things from math
print everything # Prints 'em all!
输出结果：
['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']


def biggest_number(*args):#表示传参是一个数组
  print max(args)#求最大值，min(args)求数组中的最小值,abs(-10)求绝对值
  return max(args)


print type(42)
print type(4.2)
print type('spam')
输出结果：
<type 'int'>
<type 'float'>
<type 'str'>

20 a += b #等同于 a= a+b
type(num) == int # 判断num是否是int类型数据



Python3
1.def get_boundaries(target, margin):
  low_limit=target - margin
  high_limit=margin + target
  return low_limit,high_limit

low, high = get_boundaries(100,20)

2."na"*6，表示将字符串"na"重复六次。

def repeat_stuff(stuff, num_repeats=10):#表示给num_repeats一个默认值
  return stuff*num_repeats

The function should return num raised to the 10th power.#表示num**10，是十次方，而不是十倍
num**(1/2)#开方根
num1 divided by half of num2.#num1%(num2/2)

3.my_baby_bool="true"
print(type(my_baby_bool))


try:
  # function call
except ______:
  # error message

def divide_two_numbers(x, y):
  result = x / y
  return result

try:
  result = divide_two_numbers(2,0)#运行将会报错ZeroDivisionError
  print(result)
except NameError:
  print("A NameError occurred.")
except ValueError:
  print("A ValueError occurred.") 
except ZeroDivisionError:
  print("A ZeroDivisionError occurred.")

 base raised to the exponent#base**exponent

4.import random
num = random.randint(1, 10)#表示生成1到10的随机数

5sam_height=['Sam',67]#数组

names = ['Jenny', 'Alexus', 'Sam', 'Grace']
dogs_names = ['Elphonse', 'Dr. Doggy DDS', 'Carter', 'Ralph']
names_and_dogs_names = zip(names, dogs_names)#合并两个数组
list_of_names_and_dogs_names = list(names_and_dogs_names)
print(list_of_names_and_dogs_names)#打印结果如下：
[('Jenny', 'Elphonse'), ('Alexus', 'Dr. Doggy DDS'), ('Sam', 'Carter'), ('Grace', 'Ralph')]


5.# Create a list
my_list = [1, 2, 3]

# Append a number
my_list.append(5)#若数组中的不是单一元素，则append时用括号括起来表示是一个单元即可
print(my_list) # check the result
the output looks like:
[1, 2, 3, 5]


orders = ['daisy', 'buttercup', 'snapdragon', 'gardenia', 'lily']
# Create new orders here:
new_orders = orders +['lilac','iris']#两个数组的拼接
print(new_orders)#结果：['daisy', 'buttercup', 'snapdragon', 'gardenia', 'lily','lilac','iris']

6.
if we want the numbers from 0 through 9, we use range(10) because 10 is 1 greater than 9:

my_range = range(10)#默认从0开始
Just like with zip, the range function returns an object that we can convert into a list:

>>> print(my_range)
range(0, 10)#左闭右开区间
>>> print(list(my_range))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

range(2, 9, 2) will give us a list where each number is 2 greater than the previous number:

>>> my_range2 = range(2, 9, 2)#2到9的左闭右开区间，并且数字间隔为2(末尾参数)
>>> print(list(my_range2))
[2, 4, 6, 8]

7.list1 = range(2, 20, 3)

list1_len = len(list1)#计算数组长度
print(list1_len)

8.employees = ['Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert']
index4=employees[4]#和Java一样，Index是0～lenth-1
employees[-1]#表示获取最后一个

employees[0:2]#表示获取 左闭右开区间的数组，获取的结果是个子数组
employees[-2:]#表示获取数组的最后两个元素的子数组
employees.count('Jim')#统计数组中‘’元素的个数
employees.sort()#会按字母顺序进行排序
new_employees = sorted(employees)#排序后不改变原数组，而是新生成一个数组


9.def double_index(lst, index):
  new_list = []
  i=0
  length = len(lst)
  while(i < length):#while循环
    if i == index :
      new_list.append(2*lst[i])
    else :
      new_list.append(lst[i])
    i +=1#变量修改
  return new_list

def remove2(lst, start, end):#去除start，end闭区间的元素
  length = len(lst)
  if end+1 < length -1:
  	return lst[:start]+lst[end+1:]
  else :
    return lst[:start]

10.def middle_element(lst):
  length = len(lst)
  if length%2 == 0:
    return (lst[int(length/2)]+lst[int(length/2 -1)])/2
  else:
    return lst[int((length-1)/2)]#List的Index要保证是Integer类型，所以在【】中的值加了int(****)

11.for breed in dog_breeds:#dog_breeds数组，类似Java中的foreach循环
  print(breed)

for i in range(5):#打印五次promise
  print(“promise”)

break在Python中同样适用，会跳出本层循环
continue也适用，跳过本次循环

12.list comprehension
usernames = [word for word in words if word[0] == '@']#表示想words数组中的第一个字符是@的元素加入到usernames数组中
updated_upvotes = [vote_value + 100 for vote_value in my_upvotes]#表示将my_upvotes中每个元素值加100后作为updated_upvotes数组的元素

def delete_starting_evens(lst):#遍历数组使其以奇数元素开头
  while (len(lst) > 0 and lst[0] % 2 == 0):
    lst = lst[1:]
  return lst

for index in range(1, len(lst), 2):#返回index为奇数的元素数组
  new_list.append(lst[index])

13.字符串的取某位或某几位的操作，可以看成是字符数组的操作，即str[:4],表示从0取到3的子串，即0到4的左闭右开区间
str[4:]表示从第四位开始到最后一位

14.str[0]="R"#说明str是一个字符串，这种是错误的，字符串不支持这种修改

password = "theycallme\"crazy\"91"#引号中有引号需要转义

def contains(big_string, little_string):#判断较短字符串是否是长串的子串
  i = 0
  j = 0
  while i < len(big_string):
    if big_string[i] == little_string[j]:
      while j < len(little_string):
        if big_string[i+j] == little_string[j]:
          j += 1
        else :
          j = 0
          break
      if j > 0:
        return True
    i += 1
  return False

def common_letters(string_one, string_two):#获取两字符串中的公有字符（返回的列表中每个字符唯一）
  lst = []
  for n in string_one:
    for m in string_two:
      if n == m and lst.count(n) == 0:
        lst.append(n)
        break
  return lst

15.有关String的一些方法：
str.upper()

str.lower()

'Hello world'.title()>>>>>>'Hello World'#returns the string in title case, which means the first letter of each word is capitalized.

'Hello world'.split()>>>>>>['Hello','world']#可以有参数，即类似Java，无参数表示用空格进行间隔

' '.join(['Hello','world'])>>>>'Hello word'

'Hello world'.replace('H','J')>>>>>'Jello world'

' Hello world '.strip()>>>>'Hello world'

"{} {}".format("Hello","world")>>>>'Hello world'

16。\n Newline
\t Horizontal Tab

str.replace('想被替换的','想要换成的')
str.find('')#will return the index value of the first character of that string.

def favorite_song_statement(song, artist):
  return "My favorite song is {} by {}.".format(song, artist)#{}类似占位符%d的作用

for temp in highlighted_poems_stripped:
  highlighted_poems_details.append(temp.split(':'))#highlighted_poems_details是一个数组的数组

https://www.codecademy.com/practice/projects/censor-dispenser这个页面的练习没做下去


def count_multi_char_x(word, x):#查看word中有多少个x，x可以是单个字符也可以是多个字符的情况
  temp = word.split(x)
  return len(temp)-1

def substring_between_letters(word, start, end):#获取word中以start字符开头end字符结尾的中间部分的子串，若不同时包括start和end则返回整个word
  start_ind = word.find(start)
  end_ind = word.find(end)
  if start_ind > -1 and end_ind > -1:
  	return(word[start_ind+1:end_ind])
  return word

17.from datetime import datetime

import random

# Create random_list below:
random_list = [random.randint(1,101) for i in range(101)]

# Create randomer_number below:
randomer_number = random.choice(random_list)

。random.choice() which takes a list as an argument and returns a number from the list
。random.randint() which takes two numbers as arguments and generates a random number between the two numbers you passed in



18.import codecademylib3_seaborn

# Add your code below:
from matplotlib import pyplot as plt#matplotlib, which allows you to plot your Python code in 2D.

import random

numbers_a = range(1, 13)

numbers_b = random.sample(range(1000), 12)#random.sample() that takes a range and a number as its arguments. It will return the specified number of random numbers from that range.返回在range范围内指定个数的随机数

plt.plot(numbers_a, numbers_b)

plt.show()


19.cost_of_gum = 0.10
cost_of_gumdrop = 0.35

cost_of_transaction = cost_of_gum + cost_of_gumdrop
# Returns 0.44999999999999996


from decimal import Decimal

cost_of_gum = Decimal('0.10')
cost_of_gumdrop = Decimal('0.35')

cost_of_transaction = cost_of_gum + cost_of_gumdrop
# Returns 0.45 instead of 0.44999999999999996


20.在script.py中from library import always_three，其中always_three 是在library.py中写的函数，这样在script.py中可以调用always_three方法

https://www.codecademy.com/courses/learn-python-3/videos/learn-python3-datetimes?action=resume_content_item 
https://www.codecademy.com/courses/learn-python-3/videos/learn-python3-pipenv?action=resume_content_item
这个video加载不出来






























